{"version":3,"sources":["Currencies.js","App.js","serviceWorker.js","index.js"],"names":["Currencies","handleChange","evt","setState","target","name","value","calculateIncome","result","props","userIncome","targetRate","console","log","convertedIncome","toFixed","calculateSurplusShortage","annualExpenses","state","totalExpenses","newSurplusShortage","surplusShortage","calculateTotalExpenses","newExpensesArray","food","housing","bills","transport","entertainment","map","number","parseFloat","newTotal","reduce","accumulator","currentValue","bind","className","htmlFor","type","id","onChange","this","expensesArray","onClick","Component","App","handleIncomeInputChange","event","incomeInput","handleCurrentChange","userSelection","currentCurrencyCode","handleTargetChange","targetSelection","targetCurrencyCode","axios","url","then","res","conversionCode","convertedRate","data","rates","catch","error","callbackFunction","childData","countryNames","countries","newCountries","forEach","country","currencies","currency","currencyCode","code","push","index","key","parentCallback","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.0923f86e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport { app } from 'firebase';\n\nclass Currencies extends Component {\n  constructor() {\n    super();\n    this.state = {\n      housing: 0,\n      bills: 0,\n      entertainment: 0,\n      food: 0,\n      transport: 0,\n      convertedIncome: 0,\n      totalExpenses: 0,\n      surplusShortage: 0\n    }\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange = (evt) => {\n    // and use it to target the key on our `state` object with the same name, using bracket syntax\n    this.setState({\n      [evt.target.name]: evt.target.value\n    });\n  }\n\n  calculateIncome = () => {\n    // result is the userIncome in the new currency.\n    let result = this.props.userIncome * this.props.targetRate;\n    console.log(result)\n    this.setState({\n      convertedIncome: result.toFixed(2)\n    }, () => {\n      // call the surplus shortage function only when the convertedIncome is updated\n      this.calculateSurplusShortage()\n    })\n  }\n\n\n  calculateSurplusShortage = () => {\n    // get the annual expenses in the new currency\n    let annualExpenses = this.state.totalExpenses * 12\n    console.log('annualExpenses:', annualExpenses)\n\n    let newSurplusShortage = this.state.convertedIncome - annualExpenses\n    console.log('newSurplusShortage:', newSurplusShortage)\n\n    this.setState({\n      surplusShortage: newSurplusShortage.toFixed(2)\n    })\n  }\n\n\n  calculateTotalExpenses = () => {\n    // array to store all the string values from the state\n    let expensesArray = [\n      this.state.food,\n      this.state.housing,\n      this.state.bills,\n      this.state.transport,\n      this.state.entertainment\n    ]\n\n\n\n    // converting to array of numbers to use later in the calculation\n    let newExpensesArray = expensesArray.map(number => {\n      console.log(number)\n      return parseFloat(number)\n    })\n\n    console.log('numArray:', newExpensesArray)\n\n    // building the calculation\n    const reducer = (accumulator, currentValue) => accumulator + currentValue;\n\n    // takes the number array and uses the reducer to calculate the total sum of expenses\n    let newTotal = newExpensesArray.reduce(reducer);\n\n\n    this.setState({\n      totalExpenses: newTotal.toFixed(2),\n    }, () => {\n      this.calculateIncome()\n    })\n\n  }\n\n\n\n    render() {\n      return (\n        <div>\n          <div className=\"expenses\">\n            <div className=\"wrapper\">\n              <div className=\"expense\">\n                <label htmlFor=\"\">Housing</label>\n                <input\n                  name=\"housing\"\n                  type=\"text\"\n                  id=\"housing\"\n                  onChange={this.handleChange}\n                  value={this.state.expensesArray}\n                />\n              </div>\n              <div className=\"expense\">\n                <label htmlFor=\"\">Bills</label>\n                <input\n                  name=\"bills\"\n                  type=\"text\"\n                  id=\"bills\"\n                  onChange={this.handleChange}\n                  value={this.state.expensesArray}\n                />\n              </div>\n              <div className=\"expense\">\n                <label htmlFor=\"\">Food</label>\n                <input\n                  name=\"food\"\n                  type=\"text\"\n                  id=\"food\"\n                  onChange={this.handleChange}\n                  value={this.state.expensesArray}\n                />\n              </div>\n              <div className=\"expense\">\n                <label htmlFor=\"\">Transport</label>\n                <input\n                  name=\"transport\"\n                  type=\"text\"\n                  id=\"transport\"\n                  onChange={this.handleChange}\n                  value={this.state.expensesArray}\n                />\n              </div>\n              <div className=\"expense\">\n                <label htmlFor=\"\">Entertainment</label>\n                <input\n                  name=\"entertainment\"\n                  type=\"text\"\n                  id=\"entertainment\"\n                  onChange={this.handleChange}\n                  value={this.state.expensesArray}\n                />\n              </div>\n\n              <div className=\"totalExpenses\">\n                <button\n                  className=\"calculateTotal\"\n                  onClick={this.calculateTotalExpenses}\n                >\n                  Calculate Total\n                </button>\n                {/* use conditional statement to display */}\n                <p>Total: ${this.state.totalExpenses}</p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"results\">\n            <div className=\"wrapper\">\n              <h2>\n                Your <span className=\"lineOne\">Future</span> Financial Status\n              </h2>\n              <p>\n                You are making:\n                <span className=\"resultStyle\">\n                  ${this.state.convertedIncome}\n                </span>\n                in (country code or name?)\n              </p>\n              <p>\n                Your surplus/shortage is:\n                <span className=\"resultStyle\">${this.state.surplusShortage}</span>\n              </p>\n            </div>\n          </div>\n        </div>\n      )\n    }\n}\n\nexport default Currencies;","import React, { Component } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport Currencies from './Currencies';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      countryNames: [],\n      currentCurrencyCode: '',\n      targetCurrencyCode: '',\n      userIncome: 0,\n      totalExpenses: 0,\n      targetRate: 0,\n    }\n  }\n\n\n  componentDidMount() {\n    // Create an axios call to retrieve data from each country\n    axios({\n      url: 'https://restcountries.eu/rest/v2/all',\n    }).then(res => {\n      // With results, create a variable to store data\n      const countries = res.data;\n\n      // Create an empty array\n      const newCountries = [];\n      // Loop through each country's data\n      countries.forEach(country => {\n        // For each country, store the country name in a variable\n        const name = country.name;\n\n        const countryCurrencies = country.currencies;\n        countryCurrencies.forEach(currency => {\n          let currencyCode = currency.code;\n\n          newCountries.push({name: name, currencyCode: currencyCode});\n          // console.log(currencyCode);\n\n          this.setState({\n            countryNames: newCountries,\n            currentCurrencyCode: currencyCode\n\n          })\n\n        })\n      })\n    })\n  }\n\n\n\n\n  handleIncomeInputChange = (event) => {\n    const incomeInput =  event.target.value\n    console.log(incomeInput)\n    // change income in state\n    this.setState ({\n      userIncome: incomeInput\n    })\n  }\n\n\n  handleCurrentChange = (event) => {\n    // look at the value attribute on the dropdown option\n    const userSelection = event.target.value;\n    // send it to state\n    this.setState({\n\t\t\tcurrentCurrencyCode: userSelection,\n    })\n  }\n\n\n\n  handleTargetChange = (event) => {\n    // look at the value attribute on the dropdown option\n    const targetSelection = event.target.value;\n    // send it to state\n    this.setState({\n      targetCurrencyCode: targetSelection,\n      // THEN (callback function),\n    }, () => {\n      // IF state on both has been set.\n      if (this.state.currentCurrencyCode) {\n        // >> run this axios call\n        axios({\n          // using custom endpoint built with pieces of state\n          url: `https://api.exchangeratesapi.io/latest?base=${this.state.currentCurrencyCode}&symbols=${this.state.targetCurrencyCode}`,\n        }).then((res) => {\n          console.log('here we are');\n          console.log(res);\n          // this gives us the target currency CODE\n          let conversionCode = this.state.targetCurrencyCode;\n          // this is the rate of conversion\n          let convertedRate = res.data.rates[conversionCode];\n          console.log(convertedRate)\n\n          this.setState({\n            targetRate: convertedRate,\n          })\n        }).catch(error => {\n          console.log('you suck');\n          //alert\n        })\n      }\n    })\n  }\n\n  callbackFunction = (childData) => {\n    this.setState({\n      totalExpenses: childData,\n    })\n  }\n\n\n  render() {\n    return (\n\t\t\t<div className=\"App\">\n\t\t\t\t<div className=\"burgundy\"></div>\n\t\t\t\t<div className=\"orange\"></div>\n\n\t\t\t\t<h1>Remote Work Budget</h1>\n\t\t\t\t<div className=\"userIncomeSection\">\n\t\t\t\t\t<div className=\"wrapper\">\n\t\t\t\t\t\t<h2 className=\"lineOne\">First,</h2>\n\t\t\t\t\t\t<h2>Enter Your Current Annual Income Status</h2>\n\n\t\t\t\t\t\t<div className=\"incomeLabelInput\">\n\t\t\t\t\t\t\t<label htmlFor=\"incomeAmount\">Income Amount:</label>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tid=\"incomeAmount\"\n\t\t\t\t\t\t\t\tvalue={this.state.userIncome}\n\t\t\t\t\t\t\t\tonChange={this.handleIncomeInputChange}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"incomeDrop\">\n\t\t\t\t\t\t\t<select onChange={this.handleCurrentChange}>\n\t\t\t\t\t\t\t\t{this.state.countryNames.map((country, index) => {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<option value={country.currencyCode} key={index}>\n\t\t\t\t\t\t\t\t\t\t\t{`${country.name} - ${country.currencyCode}`}\n\t\t\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<section className=\"target\">\n\t\t\t\t\t<div className=\"wrapper\">\n\t\t\t\t\t\t<h2 className=\"lineOne\">Next,</h2>\n\t\t\t\t\t\t<h2>Enter Your Projected Monthly Budget in your New Destination</h2>\n\n\t\t\t\t\t\t<select onChange={this.handleTargetChange}>\n\t\t\t\t\t\t\t{this.state.countryNames.map((country, index) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<option value={country.currencyCode} key={index}>\n\t\t\t\t\t\t\t\t\t\t{`${country.name} - ${country.currencyCode}`}\n\t\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\n\t\t\t\t<Currencies\n\t\t\t\t\tcurrentCurrencyCode={this.state.currentCurrencyCode}\n\t\t\t\t\tparentCallback={this.callbackFunction}\n\t\t\t\t\ttargetRate={this.state.targetRate}\n          userIncome={this.state.userIncome}\n\t\t\t\t\t// calculateResults={this.calculateIncome}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t)\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}