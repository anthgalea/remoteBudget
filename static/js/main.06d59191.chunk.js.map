{"version":3,"sources":["Currencies.js","App.js","serviceWorker.js","index.js"],"names":["Currencies","handleChange","evt","setState","target","name","value","calculateIncome","result","props","userIncome","targetRate","convertedIncome","toFixed","calculateSurplusShortage","newSurplusShortage","state","totalExpenses","surplusShortage","calculateTotalExpenses","newTotal","food","housing","bills","transport","entertainment","map","number","parseFloat","reduce","accumulator","currentValue","Swal","fire","text","showClass","popup","hideClass","bind","className","htmlFor","type","id","onChange","this","expensesArray","onClick","Intl","NumberFormat","format","targetCurrencyCode","Component","App","handleIncomeInputChange","event","incomeInput","isNaN","isIncomeValid","handleCurrentChange","userSelection","currentCurrencyCode","getCurrencies","handleTargetChange","targetSelection","axios","url","then","res","conversionCode","convertedRate","data","rates","catch","error","confirmButtonColor","countryNames","countries","newCountries","forEach","country","currencies","currency","currencyCode","code","push","index","key","parentCallback","callbackFunction","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.06d59191.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n// Import Packages\r\nimport Swal from \"sweetalert2\";\r\n\r\n\r\nclass Currencies extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      housing: 0,\r\n      bills: 0,\r\n      entertainment: 0,\r\n      food: 0,\r\n      transport: 0,\r\n      convertedIncome: 0,\r\n      totalExpenses: 0,\r\n      surplusShortage: 0\r\n    }\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  handleChange = (evt) => {\r\n    // and use it to target the key on our `state` object with the same name, using bracket syntax\r\n    this.setState({\r\n      [evt.target.name]: evt.target.value\r\n    });\r\n  }\r\n\r\n  calculateIncome = () => {\r\n    // result is the userIncome in the new currency.\r\n    let result = this.props.userIncome * this.props.targetRate;\r\n\r\n    this.setState({\r\n      convertedIncome: result.toFixed(2)\r\n    }, () => {\r\n      // call the surplus shortage function only when the convertedIncome is updated\r\n      this.calculateSurplusShortage()\r\n    })\r\n  }\r\n\r\n  calculateSurplusShortage = () => {\r\n    // get the annual expenses in the new currency\r\n    let newSurplusShortage = this.state.convertedIncome - this.state.totalExpenses\r\n    this.setState({\r\n      surplusShortage: newSurplusShortage.toFixed(2)\r\n    })\r\n  }\r\n\r\n\r\n\r\n  calculateTotalExpenses = () => {\r\n    // array to store all the string values from the state\r\n    let expensesArray = [\r\n      this.state.food,\r\n      this.state.housing,\r\n      this.state.bills,\r\n      this.state.transport,\r\n      this.state.entertainment\r\n    ]\r\n    // converting to array of numbers to use later in the calculation\r\n    let newExpensesArray = expensesArray.map(number => {\r\n      return parseFloat(number)\r\n    })\r\n\r\n\r\n    // building the calculation\r\n    const reducer = (accumulator, currentValue) => accumulator + currentValue;\r\n    // takes the number array and uses the reducer to calculate the total sum of expenses\r\n    let newTotal = newExpensesArray.reduce(reducer);\r\n    if (this.props.targetRate) {\r\n      this.setState(\r\n        {\r\n          totalExpenses: newTotal.toFixed(2),\r\n        },\r\n        () => {\r\n          this.calculateIncome()\r\n        }\r\n      )\r\n    } else {\r\n       Swal.fire({\r\n\t\t\t\t\ttext: `Please select target currency.`,\r\n\t\t\t\t\tshowClass: {\r\n\t\t\t\t\t\tpopup: 'animate__animated animate__fadeInDown',\r\n\t\t\t\t\t},\r\n\t\t\t\t\thideClass: {\r\n\t\t\t\t\t\tpopup: 'animate__animated animate__fadeOutUp',\r\n\t\t\t\t\t},\r\n\t\t\t\t})\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n\t\t\t<div>\r\n\t\t\t\t<div className=\"wrapper\">\r\n\t\t\t\t\t<div className=\"expenses\">\r\n\t\t\t\t\t\t<div className=\"expense\">\r\n\t\t\t\t\t\t\t<label htmlFor=\"\">Housing</label>\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\tname=\"housing\"\r\n\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\tid=\"housing\"\r\n\t\t\t\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\t\t\t\tvalue={this.state.expensesArray}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"expense\">\r\n\t\t\t\t\t\t\t<label htmlFor=\"\">Bills</label>\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\tname=\"bills\"\r\n\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\tid=\"bills\"\r\n\t\t\t\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\t\t\t\tvalue={this.state.expensesArray}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"expense\">\r\n\t\t\t\t\t\t\t<label htmlFor=\"\">Food</label>\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\tname=\"food\"\r\n\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\tid=\"food\"\r\n\t\t\t\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\t\t\t\tvalue={this.state.expensesArray}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"expense\">\r\n\t\t\t\t\t\t\t<label htmlFor=\"\">Transport</label>\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\tname=\"transport\"\r\n\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\tid=\"transport\"\r\n\t\t\t\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\t\t\t\tvalue={this.state.expensesArray}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"expense\">\r\n\t\t\t\t\t\t\t<label htmlFor=\"\">Entertainment</label>\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\tname=\"entertainment\"\r\n\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\tid=\"entertainment\"\r\n\t\t\t\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\t\t\t\tvalue={this.state.expensesArray}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"totalExpenses\">\r\n\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\tclassName=\"calculateTotal\"\r\n\t\t\t\t\t\t\t\tonClick={this.calculateTotalExpenses}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tCalculate Total\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t{/* use conditional statement to display */}\r\n\t\t\t\t\t\t<p className=\"totalExpensesParagraph\">Total: ${this.state.totalExpenses}</p>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"wrapper\">\r\n\t\t\t\t\t<div className=\"results\">\r\n\t\t\t\t\t\t<h2 className=\"financialStatus\">\r\n\t\t\t\t\t\t\tYour <span className=\"lineOne\">Future</span> Financial Status\r\n\t\t\t\t\t\t</h2>\r\n\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\tYou are making: <br />\r\n\t\t\t\t\t\t\t<span className=\"resultStyle\">\r\n\t\t\t\t\t\t\t\t${new Intl.NumberFormat().format(this.state.convertedIncome)}\r\n\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t&nbsp;\r\n\t\t\t\t\t\t\t{this.props.targetCurrencyCode}\r\n\t\t\t\t\t\t</p>\r\n\r\n\t\t\t\t\t\t{this.state.surplusShortage > 0 ? (\r\n\t\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\t\tYour surplus is: <br />\r\n\t\t\t\t\t\t\t\t<span className=\"resultStyle\">\r\n\t\t\t\t\t\t\t\t\t${new Intl.NumberFormat().format(this.state.surplusShortage)}\r\n\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t&nbsp;\r\n\t\t\t\t\t\t\t\t{this.props.targetCurrencyCode}\r\n\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\t\tYour shortage is: <br />\r\n\t\t\t\t\t\t\t\t<span className=\"resultStyle\">\r\n\t\t\t\t\t\t\t\t\t${new Intl.NumberFormat().format(this.state.surplusShortage)}\r\n\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t&nbsp;\r\n\t\t\t\t\t\t\t\t{this.props.targetCurrencyCode}\r\n\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n  }\r\n}\r\nexport default Currencies;","import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\n// Import Packages\r\nimport axios from 'axios';\r\nimport Swal from 'sweetalert2'\r\nimport { fadeInDown, fadeOutUp } from 'animate.css'\r\n\r\n// import Components\r\nimport Currencies from './Currencies';\r\n\r\n\r\n\r\nclass App extends Component {\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\tcountryNames: [],\r\n\t\t\tcurrentCurrencyCode: '',\r\n\t\t\ttargetCurrencyCode: '',\r\n\t\t\tuserIncome: 0,\r\n\t\t\ttargetRate: 0,\r\n\t\t\tisIncomeValid: false,\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\t// Create an axios call to retrieve data from each country\r\n\t\taxios({\r\n\t\t\turl: 'https://restcountries.eu/rest/v2/all',\r\n\t\t}).then((res) => {\r\n\t\t\t// With results, create a variable to store data\r\n\t\t\tconst countries = res.data\r\n\r\n\t\t\t// Create an empty array\r\n\t\t\tconst newCountries = []\r\n\t\t\t// Loop through each country's data\r\n\t\t\tcountries.forEach((country) => {\r\n\t\t\t\t// For each country, store the country name in a variable\r\n\t\t\t\tconst name = country.name\r\n\r\n\t\t\t\tconst countryCurrencies = country.currencies\r\n\t\t\t\tcountryCurrencies.forEach((currency) => {\r\n\t\t\t\t\tlet currencyCode = currency.code\r\n\r\n\t\t\t\t\tnewCountries.push({ name: name, currencyCode: currencyCode })\r\n\r\n\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\tcountryNames: newCountries,\r\n\t\t\t\t\t\tcurrentCurrencyCode: currencyCode,\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n\thandleIncomeInputChange = (event) => {\r\n\t\tconst incomeInput = event.target.value\r\n\r\n    // if income input is not a number, set state to true,\r\n    // which displays error message\r\n\t\tif (isNaN(incomeInput)) {\r\n\t\t\tthis.setState({\r\n\t\t\t\tisIncomeValid: true,\r\n\t\t\t})\r\n\t\t\t// if income input is an empty string, still display error message\r\n\t\t} else if (incomeInput === '') {\r\n\t\t\tthis.setState({\r\n\t\t\t\tisIncomeValid: true,\r\n\t\t\t\tuserIncome: incomeInput,\r\n\t\t\t})\r\n\t\t\t// otherwise, if user input is a number, remove error message\r\n\t\t} else {\r\n\t\t\tthis.setState({\r\n\t\t\t\tuserIncome: incomeInput,\r\n\t\t\t\tisIncomeValid: false,\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\r\n\thandleCurrentChange = (event) => {\r\n\t\t// look at the value attribute on the dropdown option\r\n\t\tconst userSelection = event.target.value\r\n\t\t// send it to state\r\n\t\tthis.setState({\r\n\t\t\tcurrentCurrencyCode: userSelection,\r\n\t\t}, () => {\r\n      this.getCurrencies()\r\n    })\r\n\t}\r\n\r\n\r\n\thandleTargetChange = (event) => {\r\n\t\t// look at the value attribute on the dropdown option\r\n\t\tconst targetSelection = event.target.value\r\n\t\t// send it to state\r\n\t\tthis.setState({\r\n\t\t\ttargetCurrencyCode: targetSelection,\r\n\t\t}, () => {\r\n      this.getCurrencies()\r\n    })\r\n  }\r\n\r\n\r\n\tgetCurrencies = () => {\r\n\t\t// run this axios call\r\n\t\taxios({\r\n\t\t\t// using custom endpoint built with pieces of state\r\n\t\t\turl: `https://api.exchangeratesapi.io/latest?base=${this.state.currentCurrencyCode}&symbols=${this.state.targetCurrencyCode}`,\r\n\t\t})\r\n    .then((res) => {\r\n      // this gives us the target currency CODE\r\n      let conversionCode = this.state.targetCurrencyCode\r\n      // this is the rate of conversion\r\n      let convertedRate = res.data.rates[conversionCode]\r\n\r\n      this.setState({\r\n        targetRate: convertedRate,\r\n      })\r\n    })\r\n    .catch((error) => {\r\n      Swal.fire({\r\n\t\t\t\ttext: `Sorry, looks we don't have one of your currencies in our database yet, but we're working on it.`,\r\n\t\t\t\tshowClass: {\r\n\t\t\t\t\tpopup: 'animate__animated animate__fadeInDown',\r\n\t\t\t\t},\r\n\t\t\t\thideClass: {\r\n\t\t\t\t\tpopup: 'animate__animated animate__fadeOutUp',\r\n\t\t\t\t\tconfirmButtonColor: '#81003c',\r\n\t\t\t\t},\r\n\t\t\t})\r\n    })\r\n\t}\r\n\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"App\">\r\n\t\t\t\t<div className=\"burgundy\"></div>\r\n\t\t\t\t<div className=\"orange\"></div>\r\n\r\n\t\t\t\t<h1>Remote Work Budget</h1>\r\n\t\t\t\t<div className=\"userIncomeSection\">\r\n\t\t\t\t\t<div className=\"wrapper\">\r\n\t\t\t\t\t\t<h2>Enter Your Current Monthly Income</h2>\r\n\r\n\t\t\t\t\t\t<div className=\"incomeLabelInput\">\r\n\t\t\t\t\t\t\t<label htmlFor=\"incomeAmount\">Income Amount:</label>\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\ttype=\"number\"\r\n\t\t\t\t\t\t\t\tid=\"incomeAmount\"\r\n\t\t\t\t\t\t\t\tvalue={this.state.userIncome}\r\n\t\t\t\t\t\t\t\tonChange={this.handleIncomeInputChange}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t{this.state.isIncomeValid ? (\r\n\t\t\t\t\t\t\t\t<p className=\"errorMessage\">Please enter a number value.</p>\r\n\t\t\t\t\t\t\t) : null}\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<div className=\"incomeDrop\">\r\n\t\t\t\t\t\t\t<select className=\"incomeDropdown\" onChange={this.handleCurrentChange}>\r\n\t\t\t\t\t\t\t\t{this.state.countryNames.map((country, index) => {\r\n\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t<option value={country.currencyCode} key={index}>\r\n\t\t\t\t\t\t\t\t\t\t\t{`${country.name} - ${country.currencyCode}`}\r\n\t\t\t\t\t\t\t\t\t\t</option>\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<section className=\"target\">\r\n\t\t\t\t\t<div className=\"wrapper\">\r\n\t\t\t\t\t\t<h2 className=\"monthlyBudgetTitle\">Enter Your Projected Monthly Budget in Your New Destination</h2>\r\n\r\n\t\t\t\t\t\t<select className=\"budgetDropdown\" onChange={this.handleTargetChange}>\r\n\t\t\t\t\t\t\t{this.state.countryNames.map((country, index) => {\r\n\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t<option value={country.currencyCode} key={index}>\r\n\t\t\t\t\t\t\t\t\t\t{`${country.name} - ${country.currencyCode}`}\r\n\t\t\t\t\t\t\t\t\t</option>\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t</select>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</section>\r\n\t\t\t\t<Currencies\r\n\t\t\t\t\tcurrentCurrencyCode={this.state.currentCurrencyCode}\r\n\t\t\t\t\tparentCallback={this.callbackFunction}\r\n\t\t\t\t\ttargetRate={this.state.targetRate}\r\n\t\t\t\t\tuserIncome={this.state.userIncome}\r\n\t\t\t\t\ttargetCurrencyCode={this.state.targetCurrencyCode}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}